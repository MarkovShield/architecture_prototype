/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ch.hsr.markovshield;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Click extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Click\",\"namespace\":\"ch.hsr.markovshield\",\"fields\":[{\"name\":\"session\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}]}");
    private static final long serialVersionUID = -4734483548978332132L;
    private static final org.apache.avro.io.DatumWriter
            WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);
    private static final org.apache.avro.io.DatumReader
            READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);
    @Deprecated
    public java.lang.CharSequence session;
    @Deprecated
    public java.lang.CharSequence url;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Click() {
    }

    /**
     * All-args constructor.
     * @param session The new value for session
     * @param url The new value for url
     */
    public Click(java.lang.CharSequence session, java.lang.CharSequence url) {
        this.session = session;
        this.url = url;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Creates a new Click RecordBuilder.
     * @return A new Click RecordBuilder
     */
    public static Click.Builder newBuilder() {
        return new Click.Builder();
    }

    /**
     * Creates a new Click RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Click RecordBuilder
     */
    public static Click.Builder newBuilder(Click.Builder other) {
        return new Click.Builder(other);
    }

    /**
     * Creates a new Click RecordBuilder by copying an existing Click instance.
     * @param other The existing instance to copy.
     * @return A new Click RecordBuilder
     */
    public static Click.Builder newBuilder(Click other) {
        return new Click.Builder(other);
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return session;
            case 1:
                return url;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                session = (java.lang.CharSequence) value$;
                break;
            case 1:
                url = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'session' field.
     * @return The value of the 'session' field.
     */
    public java.lang.CharSequence getSession() {
        return session;
    }

    /**
     * Sets the value of the 'session' field.
     * @param value the value to set.
     */
    public void setSession(java.lang.CharSequence value) {
        this.session = value;
    }

    /**
     * Gets the value of the 'url' field.
     * @return The value of the 'url' field.
     */
    public java.lang.CharSequence getUrl() {
        return url;
    }

    /**
     * Sets the value of the 'url' field.
     * @param value the value to set.
     */
    public void setUrl(java.lang.CharSequence value) {
        this.url = value;
    }

    /**
     * RecordBuilder for Click instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Click>
            implements org.apache.avro.data.RecordBuilder<Click> {

        private java.lang.CharSequence session;
        private java.lang.CharSequence url;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(Click.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.session)) {
                this.session = data().deepCopy(fields()[0].schema(), other.session);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.url)) {
                this.url = data().deepCopy(fields()[1].schema(), other.url);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Click instance
         * @param other The existing instance to copy.
         */
        private Builder(Click other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.session)) {
                this.session = data().deepCopy(fields()[0].schema(), other.session);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.url)) {
                this.url = data().deepCopy(fields()[1].schema(), other.url);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'session' field.
         * @return The value.
         */
        public java.lang.CharSequence getSession() {
            return session;
        }

        /**
         * Sets the value of the 'session' field.
         * @param value The value of 'session'.
         * @return This builder.
         */
        public Click.Builder setSession(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.session = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'session' field has been set.
         * @return True if the 'session' field has been set, false otherwise.
         */
        public boolean hasSession() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'session' field.
         * @return This builder.
         */
        public Click.Builder clearSession() {
            session = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'url' field.
         * @return The value.
         */
        public java.lang.CharSequence getUrl() {
            return url;
        }

        /**
         * Sets the value of the 'url' field.
         * @param value The value of 'url'.
         * @return This builder.
         */
        public Click.Builder setUrl(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.url = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'url' field has been set.
         * @return True if the 'url' field has been set, false otherwise.
         */
        public boolean hasUrl() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'url' field.
         * @return This builder.
         */
        public Click.Builder clearUrl() {
            url = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public Click build() {
            try {
                Click record = new Click();
                record.session = fieldSetFlags()[0] ? this.session : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.url = fieldSetFlags()[1] ? this.url : (java.lang.CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }


}
