/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.hsr.markovshield;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Session extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7412211821263870979L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Session\",\"namespace\":\"ch.hsr.markovshield\",\"fields\":[{\"name\":\"session\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence session;
  @Deprecated public CharSequence user;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Session() {}

  /**
   * All-args constructor.
   * @param session The new value for session
   * @param user The new value for user
   */
  public Session(CharSequence session, CharSequence user) {
    this.session = session;
    this.user = user;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return session;
    case 1: return user;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: session = (CharSequence)value$; break;
    case 1: user = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'session' field.
   * @return The value of the 'session' field.
   */
  public CharSequence getSession() {
    return session;
  }

  /**
   * Sets the value of the 'session' field.
   * @param value the value to set.
   */
  public void setSession(CharSequence value) {
    this.session = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(CharSequence value) {
    this.user = value;
  }

  /**
   * Creates a new Session RecordBuilder.
   * @return A new Session RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Session RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Session RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Session RecordBuilder by copying an existing Session instance.
   * @param other The existing instance to copy.
   * @return A new Session RecordBuilder
   */
  public static Builder newBuilder(Session other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Session instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Session>
    implements org.apache.avro.data.RecordBuilder<Session> {

    private CharSequence session;
    private CharSequence user;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.session)) {
        this.session = data().deepCopy(fields()[0].schema(), other.session);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Session instance
     * @param other The existing instance to copy.
     */
    private Builder(Session other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.session)) {
        this.session = data().deepCopy(fields()[0].schema(), other.session);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'session' field.
      * @return The value.
      */
    public CharSequence getSession() {
      return session;
    }

    /**
      * Sets the value of the 'session' field.
      * @param value The value of 'session'.
      * @return This builder.
      */
    public Builder setSession(CharSequence value) {
      validate(fields()[0], value);
      this.session = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'session' field has been set.
      * @return True if the 'session' field has been set, false otherwise.
      */
    public boolean hasSession() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'session' field.
      * @return This builder.
      */
    public Builder clearSession() {
      session = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public CharSequence getUser() {
      return user;
    }

    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public Builder setUser(CharSequence value) {
      validate(fields()[1], value);
      this.user = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public Builder clearUser() {
      user = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Session build() {
      try {
        Session record = new Session();
        record.session = fieldSetFlags()[0] ? this.session : (CharSequence) defaultValue(fields()[0]);
        record.user = fieldSetFlags()[1] ? this.user : (CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

}
